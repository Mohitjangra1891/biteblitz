import 'dart:io';import 'package:biteblitz/src/common/services/snackBar_service.dart';import 'package:biteblitz/src/common/views/widgets/shadow_card.dart';import 'package:biteblitz/src/features/menu/controller/menu_controller.dart';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:go_router/go_router.dart';import '../../../common/services/imagePicker/imagePickerService.dart';import '../../../common/views/widgets/appBar.dart';import '../../../common/views/widgets/button.dart';import '../../../common/views/widgets/text_field_.dart';import '../../../models/menuItem Model.dart';import '../../../res/colors.dart';import '../../../utils/router.dart';import '../../../utils/validators.dart';class add_new_item_screen extends ConsumerStatefulWidget {  final MenuItemModel? menuItem; // If this is null, the form is for adding a new item  const add_new_item_screen({super.key, this.menuItem});  @override  ConsumerState<add_new_item_screen> createState() => _add_new_item_screenState();}class _add_new_item_screenState extends ConsumerState<add_new_item_screen> {  final GlobalKey<FormState> _formKey = GlobalKey<FormState>(); // Form key  final GlobalKey<textField_widgetState> _name_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _des_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _price_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _packageCharge_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _gst_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _cgst_FieldKey = GlobalKey<textField_widgetState>();  final GlobalKey<textField_widgetState> _sgst_FieldKey = GlobalKey<textField_widgetState>();  // Controllers for text fields  TextEditingController _nameController = TextEditingController();  TextEditingController _descriptionController = TextEditingController();  TextEditingController _priceController = TextEditingController();  TextEditingController _packageChargeController = TextEditingController();  TextEditingController _gstController = TextEditingController();  TextEditingController _cgst_Controller = TextEditingController();  TextEditingController _sgst_Controller = TextEditingController();  final List<String> itemType = ['Veg', 'Non-Veg', 'Egg']; // Labels for chips  final List<String> category = ['Pizzas', 'Sides']; // Labels for chips  int _selectedItemType = -1; // Tracks the selected chip index, -1 means none selected  int _selectedCategory = -1; // Tracks the selected chip index, -1 means none selected  @override  void initState() {    super.initState();    if (widget.menuItem != null) {      // If editing, populate the controllers with existing data      _nameController.text = widget.menuItem!.name;      // _descriptionController.text = widget.menuItem!.description;      _priceController.text = widget.menuItem!.pricingDetails.formattedPrice;      // _packageChargeController.text = widget.menuItem!.pricingDetails.formatted_otherCharges;      // _gstController.text = widget.menuItem!.pricingDetails.gstPercentage.toString();      // _cgst_Controller.text = widget.menuItem!.pricingDetails.formatted_CGST_Price;      // _sgst_Controller.text = widget.menuItem!.pricingDetails.formatted_SGST_Price;      _selectedItemType = itemType.indexOf(widget.menuItem!.dietaryType.value);      _selectedCategory = category.indexOf(widget.menuItem!.category);    }  }  @override  void dispose() {    _nameController.dispose();    _priceController.dispose();    _descriptionController.dispose();    _packageChargeController.dispose();    _gstController.dispose();    _cgst_Controller.dispose();    _sgst_Controller.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    final addItemState = ref.watch(addNewMenuItem_StateProvider);    final screenHeight = MediaQuery.of(context).size.height;    final screenWidth = MediaQuery.of(context).size.width;    return GestureDetector(      onTap: () {      },      child: Scaffold(        appBar: AppBar(          backgroundColor: Colors.white,          automaticallyImplyLeading: false,          title: const appbar(            title: 'Add New Item',          ),        ),        body: Form(          key: _formKey,          child: Column(            children: [              // Spacer(),              Expanded(                child: SingleChildScrollView(                    child: Padding(                  padding: EdgeInsets.all(screenHeight * 0.02),                  child: Column(                    crossAxisAlignment: CrossAxisAlignment.start,                    children: [                      Padding(                        padding: EdgeInsets.only(bottom: screenHeight * 0.02),                        child: shadowContainer(                          color: AppColors.primary_orange_color,                          child: const Text(                            'Instructions: - Enter the name of the new item in the "Item Name" field. - Select the appropriate category for the item or tap "+" to create a new category. - Provide a brief description of the item in the "Description" field. - Enter the price of the item in the "Price" field. - Fill in the GST% (Goods and Services Tax), CGST (Central GST), and SGST (State GST) information. - Tap "Upload Item Image” to upload a photo/image of the item.',                            style: TextStyle(fontSize: 12, color: Colors.white, fontWeight: FontWeight.w600),                          ),                        ),                      ),                      const Text(                        'Select Item Type',                        style: TextStyle(fontSize: 12, color: AppColors.primary_orange_color, fontWeight: FontWeight.w600),                      ),                      SizedBox(height: screenHeight * 0.005),                      Wrap(                        spacing: 8.0, // Space between chip                        children: List<Widget>.generate(                          3,                          (int index) {                            return FilterChip(                              backgroundColor: Colors.white,                              label: Text(itemType[index]),                              // Setting the label to 'Veg', 'Non-Veg', 'Egg'                              labelStyle: TextStyle(color: _selectedItemType == index ? Colors.white : Colors.black),                              selected: _selectedItemType == index,                              showCheckmark: false,                              selectedColor: AppColors.primary_orange_color,                              onSelected: (bool selected) {                                setState(() {                                  // Update the selected chip index, ensuring only one is selected                                  _selectedItemType = selected ? index : -1;                                });                              },                            );                          },                        ).toList(),                      ),                      SizedBox(                        height: screenHeight * 0.02,                      ),                      const Text(                        'Select Item Category',                        style: TextStyle(fontSize: 12, color: AppColors.primary_orange_color, fontWeight: FontWeight.w600),                      ),                      SizedBox(height: screenHeight * 0.005),                      Row(                        children: [                          Wrap(                            spacing: 8.0, // Space between chip                            children: List<Widget>.generate(                              2,                              (int index) {                                return FilterChip(                                  backgroundColor: Colors.white,                                  label: Text(category[index]),                                  // Setting the label to 'Veg', 'Non-Veg', 'Egg'                                  labelStyle: TextStyle(color: _selectedCategory == index ? Colors.white : Colors.black),                                  selected: _selectedCategory == index,                                  showCheckmark: false,                                  selectedColor: AppColors.primary_orange_color,                                  // Customize the selected chip color                                  onSelected: (bool selected) {                                    setState(() {                                      // Update the selected chip index, ensuring only one is selected                                      _selectedCategory = selected ? index : -1;                                    });                                  },                                );                              },                            ).toList(),                          ),                          // Third chip with icon and different onPressed event                          Padding(                            padding: const EdgeInsets.only(left: 8.0), // Add space between the chips                            child: FilterChip(                              backgroundColor: Colors.white,                              // avatar: Icon(Icons.settings, color: Colors.black), // Icon for the third chip                              label: const Icon(Icons.add, color: Colors.black),                              // labelStyle: TextStyle(color: Colors.black),                              selected: false,                              // No selection for this chip, it's just an action button                              showCheckmark: false,                              onSelected: (bool selected) {                                print('Settings Chip Pressed');                              },                            ),                          ),                        ],                      ),                      SizedBox(height: screenHeight * 0.03),                      textField_widget(                        title: "Item Name",                        hint: 'Enter Item Name',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _name_FieldKey,                        validator: (value) => Validators.notEmpty(value, "Name"),                        controller: _nameController,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "Item Description",                        hint: 'Enter Item Description',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _des_FieldKey,                        // validator: (value) => Validators.notEmpty(value, "Description"),                        controller: _descriptionController,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "Item Price (Exclusive all Taxes)",                        hint: 'Enter Item Price',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _price_FieldKey,                        validator: (value) => Validators.notEmpty(value, "Price"),                        applyDecimalFormatting: true,                        controller: _priceController,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "Packaging Charge",                        hint: 'Enter Packaging Charge',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _packageCharge_FieldKey,                        applyDecimalFormatting: true,                        controller: _packageChargeController,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "GST %",                        hint: 'GST',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _gst_FieldKey,                        applyDecimalFormatting: true,                        // validator: (value) => Validators.notEmpty(value, "GST"),                        controller: _gstController,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "CGST",                        hint: '₹',                        color: AppColors.primary_orange_color.withOpacity(0.48),                        key: _cgst_FieldKey,                        applyDecimalFormatting: true,                        // validator: (value) => Validators.notEmpty(value, "CGST"),                        controller: _cgst_Controller,                      ),                      SizedBox(height: screenHeight * 0.02),                      textField_widget(                        title: "SGST",                        hint: '₹',                        color: AppColors.primary_orange_color.withOpacity(0.58),                        key: _sgst_FieldKey,                        applyDecimalFormatting: true,                        // validator: (value) => Validators.notEmpty(value, "SGST"),                        controller: _sgst_Controller,                      ),                      SizedBox(height: screenHeight * 0.02),                      upload_button(                        onPressed: () async {                          final File? pickedImage = await imagePickerService.pickImageFromGallery();                          print("Picked Item image is --$pickedImage");                        },                        title: 'Upload Item Image',                        icon: Icons.image,                      ),                      SizedBox(                        height: screenHeight * 0.02,                      ),                    ],                  ),                )),              ),              // SizedBox(              //   height: screenHeight * 0.02,              // ),              widget.menuItem != null                  ? Container(                      padding: EdgeInsets.only(                          bottom: screenHeight * 0.04, top: screenHeight * 0.02, left: screenHeight * 0.02, right: screenHeight * 0.02),                      color: Colors.white,                      width: screenWidth,                      child: button_Primary(                        onPressed: () {},                        title: 'Save Changes',                      ),                    )                  : Container(                      padding: EdgeInsets.only(                          bottom: screenHeight * 0.04, top: screenHeight * 0.02, left: screenHeight * 0.02, right: screenHeight * 0.02),                      color: Colors.white,                      width: screenWidth,                      child: addItemState.when(                        data: (_) {                          return button_Primary(                              onPressed: () {                                final isNameValid = _name_FieldKey.currentState?.validate() ?? false;                                final isDesValid = _des_FieldKey.currentState?.validate() ?? false;                                final isPriceValid = _price_FieldKey.currentState?.validate() ?? false;                                final isPackChargeValid = _packageCharge_FieldKey.currentState?.validate() ?? false;                                final isGstValid = _gst_FieldKey.currentState?.validate() ?? false;                                final isCgstValid = _cgst_FieldKey.currentState?.validate() ?? false;                                final isSgstValid = _sgst_FieldKey.currentState?.validate() ?? false;                                if (isNameValid && isDesValid) {                                  if (_selectedCategory == -1) {                                    SnackBarService.showSnackBar(context: context, message: "Please select a category");                                  } else if (_selectedItemType == -1) {                                    SnackBarService.showSnackBar(context: context, message: "Please select a Food Type");                                  } else {                                    ref.read(menu_Controller_Provider.notifier).addNewMenuItem(ref, context,                                        name: _nameController.text.trim(),                                        price: int.parse(_priceController.text.trim()),                                        category: "66fed02a3308d96b2a5b7219",                                        image: "https://restaurants.pizzahut.co.in/files/upload_outlet_image_data/1484654310-2compressor.jpg",                                        isVeg: itemType[_selectedItemType] == "Veg");                                  }                                }                              },                              title: 'Add New Item');                        },                        loading: () => const Center(                            child: CircularProgressIndicator(                          color: AppColors.primary_orange_color,                        )),                        error: (err, _) => Text('Error: $err'),                      ),                    ),            ],          ),        ),      ),    );  }}